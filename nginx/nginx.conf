upstream user_service {
    least_conn;
    server user-service:3001 max_fails=3 fail_timeout=30s;
}

upstream ocr_service {
    least_conn;
    server ocr-service:3002 max_fails=3 fail_timeout=30s;
}

upstream icu_service {
    least_conn;
    server icu-service:3003 max_fails=3 fail_timeout=30s;
}

upstream notification_service {
    least_conn;
    server notification-service:3004 max_fails=3 fail_timeout=30s;
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

server {
    listen 80;
    server_name localhost;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Client body size limit (for image uploads)
    client_max_body_size 10M;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # User Service routes
    location /api/users {
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 10;

        proxy_pass http://user_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # OCR Service routes (health check only, internal service)
    location /api/ocr/health {
        proxy_pass http://ocr_service/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    # ICU Service routes
    location /api/patients {
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 10;

        proxy_pass http://icu_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Notification Service routes
    location /api/notifications {
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 10;

        proxy_pass http://notification_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # API documentation/info endpoint
    location /api {
        default_type application/json;
        return 200 '{
            "service": "Patient Monitoring System API Gateway",
            "version": "1.0.0",
            "endpoints": {
                "users": "/api/users",
                "patients": "/api/patients",
                "notifications": "/api/notifications"
            },
            "documentation": "See README.md for full API documentation"
        }';
    }

    # Default error page
    error_page 404 /404.html;
    location = /404.html {
        internal;
        default_type application/json;
        return 404 '{"error": "Not Found", "message": "The requested resource was not found"}';
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
        default_type application/json;
        return 500 '{"error": "Internal Server Error", "message": "Something went wrong"}';
    }
}
